blueprint:
  name: Flowers
  description: Regularly check all plants for low moisture or conductivity (Needs to be used with Plant Monitor integration)
  domain: automation
  input:
    device:
      name: device
      description: Pick a device to send the notification to
      default:
        entity_id: []
      selector:
        device:
          integration: mobile_app
    time:
      name: Time to check
      description: Test is run at configured time
      default: "20:00:00"
      selector:
        time: {}
    day:
      name: Weekday to check
      description:
        "Check is run at configured time either everyday or on a given
        weekday"
      selector:
        select:
          options:
            - label: Every day
              value: "0"
            - label: Monday
              value: "1"
            - label: Tuesday
              value: "2"
            - label: Wednesday
              value: "3"
            - label: Thursday
              value: "4"
            - label: Friday
              value: "5"
            - label: Saturday
              value: "6"
            - label: Sunday
              value: "7"
      default: "Every day"
    exclude:
      name: Excluded Sensors
      description: Plants to exclude from detection. Only
        entities are supported, devices must be expanded!
      default:
        entity_id: []
      selector:
        target:
          entity:
            device_class: plant
    water_text:
      name: Water text
      description: Text to display as title for the sensors with low moisture
      selector:
        text:
          type: text
      default: "Needs water:"
    nutritions_text:
      name: Nutritions text
      description: Text to display as title for the sensors with low nutritions
      selector:
        text:
          type: text
      default: "Needs nutrition:"
    both_text:
      name: Both text
      description: Text to display as title for the sensors with low nutritions & water
      selector:
        text:
          type: text
      default: "Needs water & nutrition:"
    high_temp_enabled:
      name: High temp alarm
      description: Turn on to activate a high temp alarm at the set temperature.
      selector:
        boolean:
      default: false
    low_temp_enabled:
      name: Low temp alarm
      description: Turn on to activate a low temp alarm at the set temperature.
      selector:
        boolean:
      default: false
    night_temp_enabled:
      name: Night temp alarm
      description: |-
        Turn on to activate an alarm when the temperature in the next 12 hours will fall below the low treshold.
        Usefull for when you have plants outside that can't handle cold weather that well. 
        Remember to turn this off incase you bring your plants inside for the winter
      selector:
        boolean:
      default: false
    hourly_weather_forcast:
      name: weather
      description: |-
        The hourly weather sensor you want to use for the night notification,
        Requires Met.no (the standard integration in HA) and "home houerly" sensor needs to be activated
      selector:
        entity:
          domain: weather
    temp_sensor:
      name: temp sensor
      description: Choose the temperature sensor to use for the temp alarms.
      default:
        entity_id: []
      selector:
        entity:
          device_class: temperature
          domain: sensor
    high_threshold:
      name: High temp level threshold
      description: Treshhold for high temp alarm, if the specified sensor is above this value then you will get a notification.
      default: 35
      selector:
        number:
          min: 0
          max: 100.0
          unit_of_measurement: "째C"
          mode: slider
          step: 1
    low_threshold:
      name: Low temp level threshold
      description: Treshhold for low temp alarm, if the specified sensor is above this value then you will get a notification.
      default: 8
      selector:
        number:
          min: 0
          max: 100.0
          unit_of_measurement: "째C"
          mode: slider
          step: 1
variables:
  day: !input day
  exclude: !input exclude
  temp_sensor: !input temp_sensor
  high_threshold: !input high_threshold
  low_threshold: !input low_threshold
  forecast: !input hourly_weather_forcast
  lowest_night_temp: 
    "{{[states[forecast].attributes.forecast[0]['temperature'],
          states[forecast].attributes.forecast[1]['temperature'],
          states[forecast].attributes.forecast[2]['temperature'],
          states[forecast].attributes.forecast[3]['temperature'],
          states[forecast].attributes.forecast[4]['temperature'],
          states[forecast].attributes.forecast[5]['temperature'],
          states[forecast].attributes.forecast[6]['temperature'],
          states[forecast].attributes.forecast[7]['temperature'],
          states[forecast].attributes.forecast[9]['temperature'],
          states[forecast].attributes.forecast[10]['temperature'],
          states[forecast].attributes.forecast[11]['temperature'],
          states[forecast].attributes.forecast[12]['temperature'],
          states[forecast].attributes.forecast[13]['temperature'],
          ]| min}}"
  night_temp_enabled: !input night_temp_enabled
  sensors: "{% set result = namespace(sensors=[]) %}
    {% for state in states.plant
    | selectattr('attributes.device_class', '==', 'plant')
    | selectattr('state','==', 'problem')
    | selectattr('attributes.moisture_status','!=', 'High')
    | selectattr('attributes.conductivity_status','!=', 'High')%}
    {% set
    result.sensors = result.sensors + [state.name] %}
    {% endfor %}
    {{result.sensors| join(', ')}}"
  water_text: !input water_text
  nutritions_text: !input nutritions_text
  both_text: !input both_text
  water: "{% set result = namespace(sensors=[]) %}
    {% for state in states.plant
    | selectattr('attributes.moisture_status', 'defined')
    | selectattr('attributes.device_class', '==', 'plant')
    | selectattr('attributes.moisture_status','==', 'Low')
    | selectattr('attributes.conductivity_status','==', 'ok')%}
    {% set
    result.sensors = result.sensors + [state.name]%}
    {% endfor %}
    {% if result.sensors|join(',') != '' %}
    {{ water_text+'

        '+result.sensors|join (',

    ')}}
    {% endif %}"
  nutritions: "{% set result = namespace(sensors=[]) %}
    {% for state in states.plant
    | selectattr('attributes.moisture_status', 'defined')
    | selectattr('attributes.device_class', '==', 'plant')
    | selectattr('attributes.moisture_status','==', 'ok')
    | selectattr('attributes.conductivity_status','==', 'Low')%}
    {% set
    result.sensors = result.sensors + [state.name]%}
    {% endfor %}
    {% if result.sensors|join(',') != '' %}
    {{nutritions_text+'

    '+result.sensors|join(',

    ')}}
    {% endif %}"
  both: "{% set result = namespace(sensors=[]) %}
    {% for state in states.plant
    | selectattr('attributes.moisture_status', 'defined')
    | selectattr('attributes.device_class', '==', 'plant')
    | selectattr('attributes.moisture_status','==', 'Low')
    | selectattr('attributes.conductivity_status','==', 'Low')%}
    {% set
    result.sensors = result.sensors + [state.name]%}
    {% endfor %}
    {% if result.sensors|join(',') != '' %}
    {{both_text+'

    '+result.sensors|join(',

    ')}}
    {% endif %}"
  night_temp: "{% if [states[forecast].attributes.forecast[0]['temperature'],
    states[forecast].attributes.forecast[1]['temperature'],
    states[forecast].attributes.forecast[2]['temperature'],
    states[forecast].attributes.forecast[3]['temperature'],
    states[forecast].attributes.forecast[4]['temperature'],
    states[forecast].attributes.forecast[5]['temperature'],
    states[forecast].attributes.forecast[6]['temperature'],
    states[forecast].attributes.forecast[7]['temperature'],
    states[forecast].attributes.forecast[9]['temperature'],
    states[forecast].attributes.forecast[10]['temperature'],
    states[forecast].attributes.forecast[11]['temperature'],
    states[forecast].attributes.forecast[12]['temperature'],
    states[forecast].attributes.forecast[13]['temperature'],
    ]| min < low_threshold and night_temp_enabled == true %}
    The temperature will be below {{low_threshold | int}}째C,
    and at it's lowest point it will be {{lowest_night_temp}}째C
    {%endif%}"

trigger:
  - platform: time
    at: !input time
    id: time
  - platform: numeric_state
    entity_id: !input temp_sensor
    above: !input high_threshold
    for:
      hours: 1
      minutes: 0
      seconds: 0
    id: temp_high
  - platform: numeric_state
    entity_id: !input temp_sensor
    below: !input low_threshold
    for:
      hours: 0
      minutes: 15
      seconds: 0
    id: temp_low
action:
action:
  - choose:
      - conditions:
        - condition: trigger
          id: time
        - condition: or
          conditions:
            - "{{ sensors != '' and (day | int == 0 or day | int == now().isoweekday()) }}"
            - "{{[states[forecast].attributes.forecast[0]['temperature'],
                states[forecast].attributes.forecast[1]['temperature'],
                states[forecast].attributes.forecast[2]['temperature'],
                states[forecast].attributes.forecast[3]['temperature'],
                states[forecast].attributes.forecast[4]['temperature'],
                states[forecast].attributes.forecast[5]['temperature'],
                states[forecast].attributes.forecast[6]['temperature'],
                states[forecast].attributes.forecast[7]['temperature'],
                states[forecast].attributes.forecast[9]['temperature'],
                states[forecast].attributes.forecast[10]['temperature'],
                states[forecast].attributes.forecast[11]['temperature'],
                states[forecast].attributes.forecast[12]['temperature'],
                states[forecast].attributes.forecast[13]['temperature'],
                ]| min < low_threshold and night_temp_enabled == true }}"
        sequence:
          - device_id: !input device
            domain: mobile_app
            type: notify
            message: |
              {% if water != '' %}
              {{water}}
              {% endif -%}
              {% if nutritions != '' %}
              {{nutritions}}
              {% endif -%}
              {% if both != '' %}
              {{both}}
              {% endif -%}
              {% if night_temp != '' %} \n
              {{night_temp}}
              {% endif -%}
            title: "{{sensors}}"
      - conditions:
          - condition: trigger
            id: temp_high
          - condition: template
            value_template: !input high_temp_enabled
        sequence:
          - device_id: !input device
            domain: mobile_app
            type: notify
            message: |-
              The temperature have been above {{high_threshold}} for one hour,
              the temperature is now {{states(temp_sensor)}}
            title: High temp alarm!
      - conditions:
          - condition: trigger
            id: temp_low
          - condition: template
            value_template: !input low_temp_enabled
        sequence:
          - device_id: !input device
            domain: mobile_app
            type: notify
            message: |-
              The temperature have been below {{low_threshold}} for fifteen minutes,
              the temperature is now {{states(temp_sensor)}}
            title: Low temp alarm!
mode: single
